function code_vector_mat = fun_code_vector(descripMtx, CodeBook, param)

% FUN_CODE_VECTOR: Compute codevector and histogram
%                  Detailed explanation goes here
% --------------------------------------------------------------------- %
% May 15, 2014, Jing Shao
% If you use this code, please cite the paper:
% J. Shao, C. C. Loy, X. Wang, "Scene-Independent Group Profiling in Crowd", CVPR, 2014.

% generate code for each point and form a matrix
if strcmp(param.codebook, 'sparse_coding')
    gamma = param.sc.gamma; 
    codeMtx = code_extraction_sp(descripMtx, CodeBook, gamma);
elseif strcmp(param.codebook, 'kmeans')
    knn = param.knn;
    codeMtx = code_extraction_knn(descripMtx, CodeBook, knn);
end

% generate a code vector from the given matrix
if strcmp(param.hist, 'max_pooling')
%     codeMtx_new = codeMtx.*repmat(descripWeight',size(codeMtx,1),1);
%     code_vector_mat = max(abs(codeMtx_new), [], 2); % add weight
    code_vector_mat = max(abs(codeMtx), [], 2);
elseif strcmp(param.hist, 'sum_pooling')
    code_vector_mat = sum(abs(codeMtx), 2);
end

code_vector_mat = code_vector_mat./sqrt(sum(code_vector_mat.^2));

end

%==========================================================================
% coefficient Matrix generated by sparse coding
function codeMtx = code_extraction_sp(descripMtx, CodeBook, gamma)

pointNum = size(descripMtx, 2);
basisNum = size(CodeBook, 2);

% codeMtx is the matrix concatenating all the coefficients
codeMtx = zeros(basisNum, pointNum);

% compute codes for each point
for iter = 1:pointNum
    codeMtx(:, iter) =  l1ls_featuresign(CodeBook, descripMtx(:, iter), gamma);
end
    
end

%==========================================================================
% coefficient Matrix generated by k-nearest neighbours
function codeMtx = code_extraction_knn(descripMtx, CodeBook, knn)

pointNum = size(descripMtx, 2);
basisNum = size(CodeBook, 2);
B = CodeBook';

beta = 1e-4;

% find k nearest neighbours
II = eye(knn, knn);
codeMtx = zeros(pointNum, basisNum);
for i = 1:pointNum
   f = descripMtx(:, i)';
   [IDX, ~] = knnsearch(B, f, 'k', knn);
   
   z = B(IDX, :) - repmat(f, knn, 1);
   C = z*z';
   C = C + II*beta*trace(C);
   w = C\ones(knn, 1);
   w = w/sum(w);
   codeMtx(i,IDX) = w';
end

codeMtx = codeMtx';

end